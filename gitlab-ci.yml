variables:
  IMAGE_NAME: quangthoi2002/tech_market
  IMAGE_TAG: api

stages:
  - test
  - build jar
  - build and push docker image
  - deploy
test_job:
  image: maven:3.6.2-jdk-11-slim
  stage: test
  script:
    - pwd
    - mvn clean
    - mvn compile
    - mvn test
  tags:
    - test
  only:
    - dev
build:
  image: maven:3.6.2-jdk-11-slim
  stage: build jar
  script:
    - mvn clean install -Dspring.profiles.active=dev && mvn package -B -e -Dspring.profiles.active=dev
  artifacts:
    paths:
      - target/*.jar
  only:
    - dev
docker build:
  services:
    - docker:19.03.13-dind
  image: docker:19.03.13-dind
  stage: build and push docker image
  script:
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD docker.io
    - docker build -t $IMAGE_NAME:v1.0.0-$CI_COMMIT_SHA .
    - echo "Docker login successful"
    - docker push $IMAGE_NAME:v1.0.0-$CI_COMMIT_SHA
  only:
    - dev
#deploy:
#  image: ubuntu:latest
#  stage: deploy
#  before_script:
#    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
#    - eval $(ssh-agent -s)
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#  script:
#    - pwd
#    - ssh root@$SERVER "docker login -u $DOCKER_USER -p $DOCKER_PASSWORD docker.io; docker stop $APP_NAME; docker system prune -a -f; docker run --name mysql --network host --env-file=mysql.env --volume=mysql-data:/var/lib/mysql -d mysql:latest; docker pull $DOCKER_REPO:latest; docker-compose up -d; docker logout"
#  only:
#    - dev